.dashboard
  %section.row
    .small-12.columns
      .search
        %form#filters-form{ action: dashboard_path }

          .topdateto
            %label.block Date To
            = date_field('range','start_time[lte]')

          .topdatefrom
            %label.block Date From
            = date_field('range','start_time[gte]')

          .topdateperiod
            %form#filters-form{ action: dashboard_path, 'data-auto-submit' => true }
              .filter
                %label.block Date Period
                = cdx_select name: 'since', value: params['since'] do |select|
                  - select.items options_for_date, :value, :label

              .topbutton
                %input#query_button.btn-primary(type='submit' value='Filter')


  %main
    %section.row
      .small-8.columns.box
        %header
          = image_tag('img/test-tube-rack.png')
          %h3 Total Tests
        .box-content
          #chartContainer{:style => "height: 200px; width: 100%;"}
            = react_component 'CanvasJsChart', chartDiv: 'chartContainer', chartData: Extras::Charts::Columns.new(@total_tests_char).render
      .small-4.columns.box
        %header
          = image_tag('img/test-tube.png')
          %h3 Failed Tests
        .box-content
          #failedchartContainer{:style => "height: 200px; width: 100%;"}
    %section.row
      .small-6.columns.box
        %header
          =image_tag('img/site.png')
          %h3 Total Tests by Site
        .box-content
          #chartContainer2{:style => "height: 200px; width: 100%;"}
      .col.small-6.columns.box
        %header
          =image_tag('img/site.png')
          %h3 Average Tests by Site
        .box-content
          #chartContainer3{:style => "height: 200px; width: 100%;"}
    %section.row
      .small-4.columns.box
        %header
          = image_tag('img/device.png')
          %h3 Total Tests by Device
        .box-content
          #chartContainer4{:style => "height: 200px; width: 100%;"}

      .small-8.columns.box
        %header
          = image_tag('img/user.png')
          %h3 Average Tests by Technician
        .box-content
          #chartContainer5{:style => "height: 200px; width: 100%;"}
    %section.row

      .small-12.columns.box
        %header
          = image_tag('img/test-tube.png')
          %h3 Outstanding Tests
        .box-content
          -if(outstanding_orders)
            = react_component('OutstandingTestsTable', title: "title", allowSorting: "true", orderBy: "-test_order", data: outstanding_orders)
          -else
            No chart information available

:javascript
  setTimeout(function(){
  var chart = new CanvasJS.Chart("failedchartContainer",
  {
  animationEnabled: true,
  data: [
  {
  type: "doughnut",
  startAngle: 60,
  toolTipContent: "{legendText}: {y} - #percent% ",
  showInLegend: true,
  dataPoints: [
  {y: 65899660, color: "#b5e083",indexLabel: "Barack Obama #percent%", legendText: "Barack Obama" },
  {y: 60929152, color: "#069ada",indexLabel: "Mitt Romney #percent%", legendText: "Mitt Romney" },
  {y: 2175850,  color: "#aaaaaa",indexLabel: "Others #percent%", legendText: "Others" }
  ]
  }
  ]
  });
  chart.render();
  },10);


:javascript
  setTimeout(function(){
  var chart = new CanvasJS.Chart("chartContainer2", {

  axisX:{
  interval: 1,
  gridThickness: 0,
  labelFontSize: 10,
  labelFontStyle: "normal",
  labelFontWeight: "normal",
  labelFontFamily: "Lucida Sans Unicode"

  },
  axisY2:{
  interlacedColor: "rgba(1,77,101,.2)",
  gridColor: "rgba(1,77,101,.1)"

  },

  data: [
  {
  type: "bar",
  name: "companies",
  axisYType: "secondary",
  color: "#9dce65",
  dataPoints: [

  {y: 5, label: "Sweden"  },
  {y: 6, label: "Taiwan"  },
  {y: 7, label: "Russia"  },
  {y: 8, label: "Spain"  },
  {y: 8, label: "Brazil"  },
  {y: 8, label: "India"  },
  {y: 9, label: "Italy"  },
  {y: 9, label: "Australia"  },
  {y: 12, label: "Canada"  },
  {y: 13, label: "South Korea"  },
  {y: 13, label: "Netherlands"  }
  ]
  }

  ]
  });

  chart.render();
  },10);

:javascript
  setTimeout(function(){
  var chart = new CanvasJS.Chart("chartContainer3",
  {
  theme: "theme1",
  animationEnabled: true,
  toolTip: {
  shared: true
  },
  axisY: {
  title: "billion of barrels"
  },
  axisY2: {
  title: "million barrels/day"
  },
  data: [
  {
  type: "column",
  color: "#9dce65",
  name: "Proven Oil Reserves (bn)",
  legendText: "Proven Oil Reserves",
  showInLegend: true,
  color: "#1E97CC",
  dataPoints:[
  {label: "Saudi", y: 262},
  {label: "Venezuela", y: 211},
  {label: "Canada", y: 175},
  {label: "Iran", y: 137},
  {label: "Iraq", y: 115},
  {label: "Kuwait", y: 104},
  {label: "UAE", y: 97.8},
  {label: "Russia", y: 60},
  {label: "US", y: 23.3},
  {label: "China", y: 20.4}


  ]
  },
  {
  type: "column",
  color: "#de4843",
  name: "Oil Production (million/day)",
  legendText: "Oil Production",
  axisYType: "secondary",
  showInLegend: true,
  color: "#9DCE65",
  dataPoints:[
  {label: "Saudi", y: 11.15},
  {label: "Venezuela", y: 2.5},
  {label: "Canada", y: 3.6},
  {label: "Iran", y: 4.2},
  {label: "Iraq", y: 2.6},
  {label: "Kuwait", y: 2.7},
  {label: "UAE", y: 3.1},
  {label: "Russia", y: 10.23},
  {label: "US", y: 10.3},
  {label: "China", y: 4.3}


  ]
  }

  ],
  legend:{
  cursor:"pointer",
  fontSize: 10,
  itemclick: function(e){
  if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
  e.dataSeries.visible = false;
  }
  else {
  e.dataSeries.visible = true;
  }
  chart.render();
  }
  },
  });

  chart.render();
  },10);

:javascript
  setTimeout(function(){
  var chart = new CanvasJS.Chart("chartContainer4",
  {
  animationEnabled: true,
  data: [
  {
  type: "doughnut",
  startAngle: 60,
  toolTipContent: "{legendText}: {y} - #percent% ",
  showInLegend: true,
  dataPoints: [
  {y: 65899660, color: "#b5e083",indexLabel: "Barack Obama #percent%", legendText: "Barack Obama" },
  {y: 60929152, color: "#069ada",indexLabel: "Mitt Romney #percent%", legendText: "Mitt Romney" },
  {y: 2175850,  color: "#aaaaaa",indexLabel: "Others #percent%", legendText: "Others" }
  ]
  }
  ]
  });
  chart.render();
  },10);

:javascript
  setTimeout(function(){
  var chart = new CanvasJS.Chart("chartContainer5",
  {
   theme: "theme1",
  animationEnabled: true,
  toolTip: {
  shared: true
  },
  axisY: {
  title: "billion of barrels"
  },
  axisY2: {
  title: "million barrels/day"
  },
  data: [
  {
  type: "column",
  color: "#9dce65",
  name: "Proven Oil Reserves (bn)",
  legendText: "Proven Oil Reserves",
  showInLegend: true,
  color: "#1E97CC",
  dataPoints:[
  {label: "Saudi", y: 262},
  {label: "Venezuela", y: 211},
  {label: "Canada", y: 175},
  {label: "Iran", y: 137},
  {label: "Iraq", y: 115},
  {label: "Kuwait", y: 104},
  {label: "UAE", y: 97.8},
  {label: "Russia", y: 60},
  {label: "US", y: 23.3},
  {label: "China", y: 20.4}


  ]
  },
  {
  type: "column",
  color: "#de4843",
  name: "Oil Production (million/day)",
  legendText: "Oil Production",
  axisYType: "secondary",
  showInLegend: true,
  color: "#9DCE65",
  dataPoints:[
  {label: "Saudi", y: 11.15},
  {label: "Venezuela", y: 2.5},
  {label: "Canada", y: 3.6},
  {label: "Iran", y: 4.2},
  {label: "Iraq", y: 2.6},
  {label: "Kuwait", y: 2.7},
  {label: "UAE", y: 3.1},
  {label: "Russia", y: 10.23},
  {label: "US", y: 10.3},
  {label: "China", y: 4.3}


  ]
  }

  ],
  legend:{
  cursor:"pointer",
  fontSize: 10,
  itemclick: function(e){
  if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
  e.dataSeries.visible = false;
  }
  else {
  e.dataSeries.visible = true;
  }
  chart.render();
  }
  },
  });

  chart.render();
  },10);
